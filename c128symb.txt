		;	
		;	
		;	
		; +--------------------------------------------------+	
		; ! !	
		; ! ****** COMMODORE 128 COMAL-80 ****** !	
		; ! !	
		; ! (C) COPYRIGHT UNICOMAL A/S 1984, 1986 !	
		; ! ALL RIGHTS RESERVED. !	
		; ! !	
		; ! !	
		; ! C128SYMB1 FOR COMMODORE 128 COMAL-80 REV. 2.02 !	
		; ! !	
		; +--------------------------------------------------+	
		;	
		;	
		;	
		TRUE =1	
		FALSE =0	
		;	
		;FYSISK MAP	
		;
		FMAP1 = %00111111 	RAM 0
		FMAP2 = %00111110 	RAM 0 + I/O
		FMAP3 = %01111111 	RAM 1
		FMAP4 = %01111110 	RAM 1 + I/O
		;	
		FMAP5 = %00101111 	EXT HI + RAM 0
		FMAP6 = %00101110 	EXT HI + RAM 0 + I/O
		FMAP7 = %01101111 	EXT HI + RAM 1
		FMAP8 = %01101110 	EXT HI + RAM 1 + I/O
		;	
		FMAP9 = %10101111 	EXT HI + RAM 2
		FMAP10 = %10101110 	EXT HI + RAM 2 + I/O
		FMAP11 = %11101111 	EXT HI + RAM 3
		FMAP12 = %11101110 	EXT HI + RAM 3 + I/O
		;	
		FMAP13 = %00001110 	KERNAL + RAM 0 + I/O
		FMAP14 = %00001111 	KERNAL + RAM 0 + CHARROM
		FMAP15 = %00000000 	KERNAL + RAM 0 + I/O+BASIC+MONITOR
		;	
		COFMAP = FMAP5	
		POKMAP = 2 	MAP FOR POKE,PEEK,SYS
		CPAGE = 5 	NORMAL COMAL MAP
		GPAGE = 6 	NORMAL GRAFIK MAP
		MPAGE = 15 	NORMAL MONITOR MAP
		GRFMAP =FMAP6 	FYSISK GRAFIK MAP
		IQFMAP =FMAP13 	FYSISK IRQ MAP RAM0+KER+IO
		;	
		KEYPAG = 3 	MAP FOR FUNC.KEYS (RAM1)
		TERPAG = 3 	MAP FOR TERMINATORS (RAM1)
		DEFLEN = 32 	MAX 32 CHARS. PER KEY
		KYBASE = $FD00 	PLACE FOR DEFINITIONS
		TRBASE = $FC00 	PLACE FOR TERMINATORS
		INDPAG = 3 	MAP FOR INDENT TABLE
		INDTBL = $FB00 	TABLE FOR INDENT VALUES (LIST)
		BUF0 = $F900 	BUFFER FOR CHANGE+SHOWKEYS
		BUF1 = $FA00 	BUFFER FOR CHANGE
		BFFMAP = FMAP3 	FYSISK MAP FOR BUF0+BUF1
		TXMAP = $F700 	TX MAP TABEL FOR ASCII CONV
		RXMAP = $F800 	RX MAP TABEL FOR ASCII CONV
		MAFMAP = FMAP3 	FYSISK MAP FOR MAP TABELS
		;	
		IMMUA =FMAP13 	INIT MMUPCRA KERNAL+RAM0+I/O
		IMMUB =FMAP7 	INIT MMUPCRB ENABLE CART+RAM1
		IMMUC =FMAP6 	INIT MMUPCRC ENABLE CART+I/O+RAM0
		IMMUD =FMAP5 	INIT MMUPCRD ENABLE CART+RAM0
		;	
		PAGE1 =%10000000 	CARTRIDGE OVERLAY 1 ($C000-$FFFF)
		PAGE2 =%10010000 	CARTRIDGE OVERLAY 2 ($C000-$FFFF)
		PAGE3 =%10100000 	CARTRIDGE OVERLAY 3 ($C000-$FFFF)
		PAGE4 =%10110000 	CARTRIDGE OVERLAY 4 ($C000-$FFFF)
		PAGE5 =%11000000 	CARTRIDGE OVERLAY 5 ($C000-$FFFF)
		PAGE6 =%11010000 	CARTRIDGE OVERLAY 6 ($C000-$FFFF)
		PAGE7 =%11100000 	CARTRIDGE OVERLAY 7 ($C000-$FFFF)
		PAGE8 =%11110000 	CARTRIDGE OVERLAY 8 ($C000-$FFFF)
		;	
		;	
		PAGEA =PAGE2+CPAGE 	COMAL PAGE A
		PAGEB =PAGE5+CPAGE 	COMAL PAGE B
		PAGEC =PAGE1+CPAGE 	COMAL PAGE C
		PAGED =PAGE6+CPAGE 	COMAL PAGE D
		PAGEE =PAGE7+CPAGE 	COMAL PAGE E
		PAGEF =PAGE8+CPAGE 	COMAL PAGE F
		;	
		PAGEGD =PAGE6+GPAGE 	GRAFIK PAGE D
		PAGEGE =PAGE7+GPAGE 	GRAFIK PAGE E
		PAGEGF =PAGE8+GPAGE 	GRAFIK PAGE F
		;	
		;	
		PAGEKE = 13+PAGE1 	NORMAL KERNAL MAP
		;	
		;	
		; PAGE ZERO VARIABLES:	
		; ====================	
		;	
		*=$0000	
		;	
0	$0000	D6510 *=*+1 	6510 ON-CHIP DATA-DIRECTION REGISTER
1	$0001	R6510 *=*+1 	6510 ON-CHIP 6-BIT I/O/MAP-REGISTER:
		;	
2	$0002	BANK *=*+1 	MONITOR & LONG CALL/JUMP
3	$0003	PCHI *=*+1	
4	$0004	PCLO *=*+1	
5	$0005	SREG *=*+1	
6	$0006	AREG *=*+1	
7	$0007	XREG *=*+1	
8	$0008	YREG *=*+1	
9	$0009	STKPTR *=*+1	
		;	
		ASAVE =AREG 	SAVE FOR .A (CALL/GOTO)
		XSAVE =XREG 	SAVE FOR .X (CALL/GOTO)
		PSAVE =SREG 	SAVE FOR .P (CALL/GOTO)
		GRWK3 =PCHI 	GRAPHIC WORK
		;	
		;MEMORY MAP CONTROL	
		;	
10	$000A	PAGEPT *=*+2 	POINTER USED BY LOAD/STORE/EXEC
12	$000C	PAGEY *=*+1 	OVERLAY USED FOR CONTROL OF JUMP TABLE
13	$000D	PMMUCR *=*+1 	OLD MMUCR USED FOR CONTROL OF JUMP TABLE
		;	
		; COMAL VARIABLES	
		;	
14	$000E	LOCLPT *=*+2 	CHAIN OF OLD VARIABLE DESCRIPTIONS
16	$0010	FORPT *=*+2 	STACK ENTRY CHAIN
18	$0012	SCTYPE *=*+1 	TYPE OF SYMBOL FROM SCANNER
19	$0013	TANSGN *=*+1 	TAN SIGN / COMPARISON EVALUATION FLAG
20	$0014	CODE *=*+1 	USED TO HOLD A GENERATED CODE
21	$0015	CPNT *=*+1 	POINTER TO CODE BUFFER, CDBUF
		CLIMIT =255 	LIMIT OF CPNT
22	$0016	SPROG *=*+2 	PNT TO START OF PROGRAM
24	$0018	SVARS *=*+2 	PNT TO START OF VARIABLE TABLE
26	$001A	SSTACK *=*+2 	PNT TO START OF STACK
28	$001C	SMAX *=*+2 	PNT TO TOP OF MEMORY
30	$001E	EXINF *=*+1 	INF FOR RESULT EXPRESSION FROM EXPR
		SCERR =$01	
		SCLNO =$08 	SET, IF NUMBER CAN BE A LINE NUMBER
31	$001F	LNLEN *=*+1 	LENGTH OF LINE TO BE EXECUTED
32	$0020	NPNT *=*+1 	POINTER TO NAME
33	$0021	TPNT *=*+1 	POINTER TO STRING
		TLIMIT =80	
		;	
34	$0022	INDEX1 *=*+2 	UTILITY POINTER
36	$0024	INDEX2 *=*+2 	UTILITY POINTER
		INDEX =INDEX1	
		;	
38	$0026	RESM1 *=*+1 	PRODUCT AREA FOR MULTIPLICATION
39	$0027	RESM2 *=*+1	
40	$0028	RESM3 *=*+1	
41	$0029	RESM4 *=*+1	
42	$002A	RESM5 *=*+1	
		;	
		MULT1 =RESM1 	FIRST OPERAND (MULT)
		MULT2 =RESM3 	SECOND OPERAND (MULT)
		;	
		MOVELN =MULT1	
		MOVETY =MULT2	
		;	
43	$002B	DATAPT *=*+2 	CURRENT DATA POINTER
45	$002D	STOS *=*+2 	PNT TO TOP OF STACK
47	$002F	SFREE *=*+2 	PNT TO FREE AREA OF VAR.RES
49	$0031	PRGPNT *=*+2 	PNT TO START OF LINE
51	$0033	CODPNT *=*+1 	PNT TO CODE DURING EXECUTION
52	$0034	SCLSD1 *=*+2 	OLD SFREE (CLOSED)
54	$0036	SCLSD2 *=*+2 	OLD STOS (CLOSED)
56	$0038	INF1 *=*+1	
57	$0039	INF2 *=*+1 	USED FOR OPERAND CHECKING
58	$003A	INF3 *=*+1	
59	$003B	Q1 *=*+2 	SHORT SPAN WORK AREAS
61	$003D	Q2 *=*+2	
63	$003F	Q3 *=*+2	
65	$0041	Q4 *=*+2	
67	$0043	Q5 *=*+2	
69	$0045	COPY1 *=*+2 	WORK FOR COPY: FROM
71	$0047	COPY2 *=*+2 	TO
		FDECPT =COPY2 	CURRENT VARIABLE ADDRESS (DEC POINTER)
73	$0049	COPY3 *=*+2 	LENGTH
75	$004B	BUS *=*+1 	BUS=0: BUS IDLE; BUS<>0: BUS ACTIVE
76	$004C	STINF *=*+1 	INFORMATION FOR STATEMENT:
		CMND =$01 	NO LINE NUMBER
		TWOST =$02 	ANOTHER STATEMENT FOLLOWS
		WHLDO =$04 	AFTER WHILE ... DO
		FORDO =$08 	AFTER FOR ... DO
		COMMNT =$10 	STATEMENT ENDED BY COMMENT
		IFTHEN =$20 	AFTER IF ... THEN
		REPUNT =$40 	AFTER REPEAT ... UNTIL
		;	
77	$004D	EXCINF *=*+1 	EXECUTION INFORMATION:
		ESCTRP =$02 	ESCAPE IS TRAPPED (STOP)
		SRQ =$04 	MAKE CALL OF COMAL INTERRUPT HANDLER.
		ESCMET =$08 	ESCAPE MET (STOP)
		SRQON =$10 	SRQ ENABLED
		USRQON =$20 	USER REQUEST ENABLED
		SFTSRQ =$80 	SOFTWARE SRQ ONLY
		;	
		; VARIABLES FOR FLOATING POINT PACKAGES	
		;	
78	$004E	TEMPF3 *=*+6 	MISC. FP WORK AREA
		NUMBER =TEMPF3 	FP WORK AREA (SYNTAX ANALYSIS)
84	$0054	ESCAPE *=*+1 	STOP KEY FLAG
85	$0055	INTEGR *=*+1 	FP WORK
86	$0056	OLDOV *=*+1 	OLD OVERFLOW (ROUNDING)
87	$0057	TEMPF1 *=*+5 	MISC. FP WORK AREA (5 BYTES)
92	$005C	TEMPF2 *=*+5 	MISC. FP WORK AREA (5 BYTES)
		DECCNT =TEMPF2+1	
		TENEXP =TEMPF2+2	
		;	
97	$0061	AC1 *=*+6 	ACCUM#1:
		AC1E =AC1+0 	EXPONENT
		AC1M1 =AC1+1 	MANTISSA 1
		AC1M2 =AC1+2 	MANTISSA 2
		AC1M3 =AC1+3 	MANTISSA 3
		AC1M4 =AC1+4 	MANTISSA 4
		AC1S =AC1+5 	SIGN
		;	
103	$0067	DEGREE *=*+1 	SERIES EVALUATION CONSTANT POINTER
104	$0068	BITS *=*+1 	ACCUM#1: HI-ORDER (OVERFLOW)
		;	
105	$0069	AC2 *=*+6 	ACCUM#2:
		AC2E =AC2+0 	EXPONENT
		AC2M1 =AC2+1 	MANTISSA 1
		AC2M2 =AC2+2 	MANTISSA 2
		AC2M3 =AC2+3 	MANTISSA 3
		AC2M4 =AC2+4 	MANTISSA 4
		AC2S =AC2+5 	SIGN
		;	
111	$006F	ARISGN *=*+1 	SIGN COMPARISON, ACC#1 VS ACC#2
112	$0070	FACOV *=*+1 	ACCUM#1: LO-ORDER (ROUNDING)
113	$0071	POLYPT *=*+2 	POINTER TO POLYNOM.
		FBUFPT =POLYPT	
		;	
		; MORE COMAL VARIABLES	
		;	
115	$0073	PRPROC *=*+3 	CHAIN OF LOCAL NAMES (PREPASS)
118	$0076	INDPNT *=*+1 	POINTER TO LAST CODE WHERE AN ADDRESS WAS LOADED
119	$0077	SCFLAG *=*+1 	FLAGS IN SCANNER:
120	$0078	LNNO *=*+2 	LINE NUMBER
122	$007A	MOVEAD *=*+2 	ADDRESS FOR MOVE
124	$007C	TXTLO *=*+1 	ADDRESS OF TEXT FOR PRTXT
125	$007D	TXTHI *=*+1	
126	$007E	XX *=*+2 	CURRENT X (GRAPHICS)
128	$0080	YY *=*+2 	CURRENT Y (GRAPHICS)
130	$0082	GRWK1 *=*+2	
132	$0084	GRWK2 *=*+2	
134	$0086	GCOL *=*+1 	GRAPHIC DRAW COLOR
135	$0087	GBACK *=*+1 	GRAPHIC BACKGROUND
136	$0088	EXCFLG *=*+1 	FLAGS:
		NWNAME =$01 	NEW NAME HAS BEEN INSERTED
		NWLINE =$02 	NEW LINE HAS BEEN INSERTED
137	$0089	CHARPT *=*+1 	PNT TO INBUF
138	$008A	CHAR *=*+1 	CHAR FROM INCHAR
139	$008B	RNDX *=*+5 	RANDOM NUMBER SEED
		;	
		;VARIABLES FOR I/O	
		;	
144	$0090	STATUS *=*+1 	I/O OPERATION STATUS
145	$0091	STKEY *=*+1 	STOP KEY FLAG
146	$0092	SVXT *=*+1 	TEMPORARY
147	$0093	VERCK *=*+1 	LOAD OR VERIFY FLAG
148	$0094	C3P0 *=*+1 	IEEE BUFFERED CHAR FLAG
149	$0095	BSOUR *=*+1 	CHAR BUFFER FOR IEEE
150	$0096	SYNO *=*+1 	CASSETTE SYNC #
151	$0097	XSAV *=*+1 	TEMP FOR BASIN
152	$0098	LDTND *=*+1 	HOW MANY FILES OPEN
153	$0099	DFLTN *=*+1 	DEFAULT INPUT DEVICE #
154	$009A	DFLTO *=*+1 	DEFAULT OUTPUT DEVICE #
155	$009B	PRTY *=*+1 	CASSETTE PARITY
		T3 =PRTY	
156	$009C	DPSW *=*+1 	CASSETTE DIPOLE SWITCH
157	$009D	MSGFLG *=*+1 	OS MESSAGE FLAG
158	$009E	PTR1 *=*+1 	CASSETTE ERROR PASS 1
		T1 =PTR1 	TEMPORARY 1
159	$009F	PTR2 *=*+1 	CASSETTE ERROR PASS 2
		TMPC =PTR2	
		T2 =PTR2 	TEMPORARY 2
160	$00A0	TIME *=*+3 	24 HOUR CLOCK IN 1/60 SEC.
		R2D2 =* 	SERIAL BUS USAGE
163	$00A3	PCNTR *=*+1 	CASSETTE STUFF
		BSOUR1 =* 	TEMP USED BY SERIAL ROUTINE
164	$00A4	FIRT *=*+1	
		COUNT =* 	TEMP USED BY SERIAL ROUTINE
165	$00A5	CNTDN *=*+1 	CASSETTE SYNC COUNTDOWN
166	$00A6	BUFPT *=*+1 	TAPE BUFFER POINTER
		SHCNL =* 	CASSETTE SHORT COUNT
167	$00A7	INBIT *=*+1 	RS232 RCVR INPUT BIT STORAGE
		RER =* 	CASSETTE READ ERROR
168	$00A8	BITCI *=*+1 	RS232 RCVR BIT COUNT IN
		REZ =* 	CASSETTE READING ZEROES
169	$00A9	RINONE *=*+1 	RS232 RCVR FLAG FOR START BIT CHECK
		RDFLG =* 	CASSETTE READ MODE
170	$00AA	RIDATA *=*+1 	RS232 RCVR BYTE BUFFER
171	$00AB	RIPRTY *=*+1 	RS232 RCVR PARITY STORAGE
		SHCNH =RIPRTY 	CASSETTE SHORT COUNT
172	$00AC	SAL *=*+1 	POINTER: TAPE BUFFER/SCREEN SCROLLING
173	$00AD	SAH *=*+1	
174	$00AE	EAL *=*+1	
175	$00AF	EAH *=*+1	
176	$00B0	CMP0 *=*+1 	TAPE TIMING CONSTANT
177	$00B1	TEMP *=*+1 	TAPE TIMING CONSTANT
178	$00B2	TAPE1 *=*+2 	START OF TAPE BUFFER
		;	
		SNSW1 =* 	CASSETTE STUFF
180	$00B4	BITTS *=*+1 	RS232 TRNS BIT COUNT
181	$00B5	NXTBIT *=*+1 	RS232 TRNS NEXT BIT TO BE SENT
		DIFF =NXTBIT 	EOT RECEIVED FROM TAPE
		PRP =*	
182	$00B6	RODATA *=*+1 	RS232 TRNS BYTE BUFFER
183	$00B7	FNLEN *=*+1 	LENGTH OF CURRENT FILE NAME
184	$00B8	LA *=*+1 	CURRENT FILE LOGICAL ADDRESS
185	$00B9	SA *=*+1 	CURRENT FILE SECONDARY ADDRESS
186	$00BA	FA *=*+1 	CURRENT FILE PRIMARY ADDRESS
187	$00BB	FILADR *=*+2 	CURRENT FILE NAME ADDRESS
		OCHAR =*	
189	$00BD	ROPRTY *=*+1 	RS232 TRNS PARITY BUFFER
190	$00BE	FSBLK *=*+1 	CASSETTE READ BLOCK COUNT
191	$00BF	MYCH *=*+1 	SERIAL WORD BUFFER
192	$00C0	CAS1 *=*+1 	CASSETTE MANUAL/CONTROLLED SWITCH
193	$00C1	STAL *=*+1 	TAPE START ADDRESS
194	$00C2	STAH *=*+1	
		TMP2 =*	
195	$00C3	MEMUSS *=*+2 	TAPE LOAD TEMPS
197	$00C5	DATA *=*+1 	TAPE R/W DATA
198	$00C6	BA *=*+1 	BANK CUR LOAD/SAVE/VER OPE.
199	$00C7	FNBANK *=*+1 	BANK FOR CUR FILENAME
		;	
200	$00C8	RIBUF *=*+2 	RS-232 INPUT BUF PTR
202	$00CA	ROBUF *=*+2 	RS-232 OUTPUT BUF PTR
		;	
		;40/80 COLUMN SCREEN EDITOR	
		;	
		;GLOBAL SCREEN EDITOR VAR	
		;	
204	$00CC	KEYTAB *=*+2 	KEYSCAN TABLE PTR
206	$00CE	IMPARM *=*+2 	PRIMM UTIL. STRING PTR
208	$00D0	NDX *=*+1 	INDEX TO KEYB. QUEUE
209	$00D1	KYNDX *=*+1 	PENDING FUNC. KEY FLAG
210	$00D2	KEYIDX *=*+1 	INDEX INTO PEND. FUNC. KEY STRING
211	$00D3	SHFLAG *=*+1 	KEYSCAN SHIFT KEY STATUS
212	$00D4	SFDX *=*+1 	KEYSCAN CUR. KEY INDEX
213	$00D5	LSTX *=*+1 	KEYSCAN LAST KEY INDEX
		NEWKEY =LSTX	
214	$00D6	CRSW *=*+1 	<CR> INPUT FLAG
		;	
215	$00D7	EMODE *=*+1 	40/80 COL. MODE FLAG
216	$00D8	GRAPHM *=*+1 	TEXT/GRAPHIC MODE FLAG
		;	
217	$00D9	CHAREN *=*+1 	RAM/ROM VIC CHR FETCH FLAG (BIT-2)
		;	
		;THE FOLLOWING ARE SHARED BY SEVERAL EDIT. ROUTINES	
		;	
218	$00DA	SEDSAL *=*+2 	POINTER FOR MOXLIN
220	$00DC	SEDEAL *=*+2	
222	$00DE	SEDT1 *=*+1 	SAWPO
223	$00DF	SEDT2 *=*+1	
		;	
		*=SEDSAL 	SHARE WITH SEDSAL
218	$00DA	KEYSIZ *=*+1 	PROGRAMMABLE KEY VAR.
219	$00DB	KEYLNG *=*+1	
220	$00DC	KEYNUM *=*+1	
221	$00DD	KEYNXT *=*+1	
222	$00DE	KEYBNK *=*+1	
223	$00DF	KEYTMP *=*+1	
		;	
		*=SEDSAL 	SHARE WITH SEDSAL
218	$00DA	BITMSK *=*+1 	TEMP FOR TAB & LINE WRAP ROUT.
219	$00DB	SAVER *=*+1	
220	$00DC	*=*+4	
		;	
		;LOCAL SCREEN EDITOR VAR.	
		;	
224	$00E0	PNT *=*+2 	PTR TO CUR LINE(TEXT)
		CURLIN =PNT	
226	$00E2	USER *=*+2 	PTR TO CUR LINE(ATTRIBUTE)
		;	
228	$00E4	SCBOT *=*+1 	WINDOW LOWER LIMIT
229	$00E5	SCTOP *=*+1 	WINDOW UPPER LIMIT
230	$00E6	SCLF *=*+1 	WINDOW LEFT MARGIN
231	$00E7	SCRT *=*+1 	WINDOW RIGHT MARGIN
		;	
232	$00E8	LSXP *=*+1 	CUR INPUT COLUMN START
233	$00E9	LSTP *=*+1 	CUR INPUT LINE START
234	$00EA	INDX *=*+1 	CUR INPUT LINE END
		;	
235	$00EB	TBLX *=*+1 	CUR CURSOR LINE
		ROWPOS =TBLX	
236	$00EC	PNTR *=*+1 	CUR CURSOR COLUMN
		COLPOS =PNTR	
		;	
237	$00ED	LINES *=*+1 	MAX NUMBER OF SCREEN LINES
238	$00EE	COLUMN *=*+1 	MAX NUMBER OF SCREEN COLUMNS
239	$00EF	DATAX *=*+1 	CUR CHARACTER TO PRINT
240	$00F0	LSTCHR *=*+1 	PREV. CHARACTER PRINTED(FOR ESC)
241	$00F1	COLOR *=*+1 	CUR ATTRIBUTE TO PRINT(DEF FGND COLOR)
242	$00F2	TCOLOR *=*+1 	SAVED ATRIBUTE TO PRINT
		;	
243	$00F3	RVS *=*+1 	REVERSE MODE FLAG
244	$00F4	QTSW *=*+1 	QUOTE MODE FLAG
		QUOTE =QTSW	
245	$00F5	INSRT *=*+1 	INSERT MODE FLAG
246	$00F6	INSFLG *=*+1 	AUTO-INSERT MODE FLAG
		;	
247	$00F7	LOCKS *=*+1 	DISABLE <C=><SHIFT>, <CRTL>-S
248	$00F8	SCROLL *=*+1 	DISABLE SCREEN SCROLL, LINE LINKER
249	$00F9	BEEPER *=*+1 	DISABLE <CRTL>-S
250	$00FA	*=*+1 	CHANGED BY SWAP EDIT MODE
		;	
		;MORE COMAL VAR	
		;	
251	$00FB	MAPX *=*+1 	MAP FOR LOAD/STORE/EXEC ROUTINES
252	$00FC	PAGEX *=*+1 	OVERLAY FOR LOAD/STORE/EXEC ROUTINES
		;GRAPHIC VAR	
253	$00FD	RESOL *=*+1 	GRAPHICS RESOLUTION
254	$00FE	GCOLH *=*+1 	GRAPHICS PENCOLOR*16
		;	
		;END OF PAGE ZERO	
		;	
		*=$0100	
256	$0100	STACK *=*+256 	SYSTEM STACK
		FBUFFR =STACK 	FPASC WORK AREA (15 BYTES)
		BAD =STACK 	TAPE INPUT ERROR LOG
		;	
		;	
512	$0200	ERTLEN *=*+1 	LENGTH OF ERTEXT
		MAXERT =79 	MAX. LENGTH OF ERTEXT
513	$0201	ERTEXT *=*+MAXERT 	BUFFER TO HOLD ERROR MESSAGE
		;	
		FNMAX =55	
592	$0250	FILNAM *=*+FNMAX 	USED FOR STORAGE OF FILE NAME
		TBUFF =FILNAM 	USED FOR STORAGE OF DISC COMMAND
		;	
		;STORAGE FOR CON COMMAND:	
		;	
647	$0287	CONPNT *=*+2 	OLD PRGPNT
649	$0289	CONFLG *=*+1 	OLD EXCINF
650	$028A	CONCOD *=*+1 	OLD CODPNT
651	$028B	CONFOR *=*+2 	OLD FORPT
		;	
653	$028D	FPWORK *=*+1	
		;	
		;	
		*=$02A2	
		;	
674	$02A2	FETCH *=*+13 	LDA( - ),Y FROM ANY BANK
		FETVEC =FETCH+8	
		;	
687	$02AF	STASH *=*+15 	STA( - ),Y TO ANY BANK
		STAVEC =STASH+10	
		;	
702	$02BE	CMPARE *=*+15 	CMP( - ),Y TO ANY BANK
		CMPVEC =CMPARE+10	
		;	
717	$02CD	JSRFAR *=*+22 	JSR XXXX TO ANY BANK & RETURN
		;	
739	$02E3	JMPFAR *=*+25 	JMP XXXX TO ANY BANK
		;	
		;*=$02FC	
		;	
		;	
		;COMAL VECTORS	
		;	
764	$02FC	IOVECT =* 	VECTORS:
764	$02FC	TRAPVC *=*+2 	 PAGEB; ERROR HANDLER
766	$02FE	EXTNVC *=*+2 	 PAGEB; EXTERNAL LOAD
768	$0300	USRQVC *=*+2 	 PAGEB; INTERRUPT FACILITY
770	$0302	IERTXT *=*+3 	 ERROR MESSAGE DATA
773	$0305	IGETLN *=*+2 	 PAGEA; INPUT COMMAND LINE
775	$0307	ISAVEC *=*+2 	 PAGEC; SAVE ADDITIONAL INFO
777	$0309	ILOADC *=*+2 	 PAGEC; LOAD ADDITIONAL INFO
779	$030B	IFNKEY *=*+2 	 PAGEA; HANDLE FUNCTION KEYS
		;	
		*=$0314 	KERNAL INDIRECT VECTORS
		;	
		;KERNAL VECTORS:	
		;	
788	$0314	IIRQ *=*+2 	IRQ RAM VECTOR
		CINV =IIRQ	
		IRQVCT =IIRQ	
		;	
790	$0316	IBRK *=*+2 	BRK INSTR RAM VECTOR
		CBINV =IBRK	
		BRKVCT =IBRK	
		;	
792	$0318	INMI *=*+2 	NMI RAM VECTOR
		NMIVCT =INMI	
		;	
794	$031A	IOPEN *=*+2 	OPEN ROUTINE VECTOR
796	$031C	ICLOSE *=*+2 	CLOSE ROUTINE VECTOR
798	$031E	ICHKIN *=*+2 	CHKIN ROUTINE VECTOR
800	$0320	ICKOUT *=*+2 	CKOUT ROUTINE VECTOR
802	$0322	ICLRCH *=*+2 	CLRCHN ROUTINE VECTOR
804	$0324	IBASIN *=*+2 	CHRIN ROUTINE VECTOR
806	$0326	IBSOUT *=*+2 	CHROUT ROUTINE VECTOR
808	$0328	ISTOP *=*+2 	STOP ROUTINE VECTOR
810	$032A	IGETIN *=*+2 	GETIN ROUTINE VECTOR
812	$032C	ICLALL *=*+2 	CLALL ROUTINE VECTOR
814	$032E	EXMON *=*+2 	FOR MACHINE LANGUAGE MONITOR
816	$0330	ILOAD *=*+2 	LOAD ROUTINE VECTOR
818	$0332	ISAVE *=*+2 	SAVE ROUTINE VECTOR
		;	
		;EDITOR VECTORS	
		;	
820	$0334	CTLVEC *=*+2 	EDITOR: PRINT 'CONTRL' INDIRECT
822	$0336	SHFVEC *=*+2 	EDITOR: PRINT 'SHIFTD' INDIRECT
824	$0338	ESCVEC *=*+2 	EDITOR: PRINT 'ESCAPE' INDIRECT
826	$033A	KEYVEC *=*+2 	EDITOR: KEYSCAN LOGIC INDIRECT
828	$033C	KEYCHK *=*+2 	EDITOR: STORE KEY INDIRECT
		;	
830	$033E	DECODE *=*+12 	VECTORS TO KEYB. MATRIX DEC TABLES
		;	
		*=$034A	
842	$034A	KEYD *=*+10 	IRQ KEYBOARD BUFFER
		KEYBUF = KEYD	
		;	
852	$0354	TABMAP *=*+10 	BITMAP OF TAB STOPS
862	$035E	BITABL *=*+4 	BITMAP OF LINE WRAPS
		;	
866	$0362	LAT *=*+10 	TABLE OF LA'S
876	$036C	FAT *=*+10 	TABLE OF FA'S
886	$0376	SAT *=*+10 	TABLE OF SA'S
		;	
		;COMAL:	
		;OPEN FILE MODES (COPEN & CFNAME):	
		;	
		MREAD =1 	READ
		MWRITE =2 	WRITE
		MREL =4 	RELATIVE (RANDOM)
		;	
		;FILE ATTRIBUTES (COPEN):	
		;	
		MDISK =8 	DISK FILE
		MS:=16 	SECONDARY ADDRESS SELECTION
		ML =32 	AUTO LINEFEED
		MT =64 	TIME OUT
		MA =128 	ASCII I/O
		;	
		;FILE TYPES (CFNAME):	
		;	
		TAPPND =8	
		TPRG =16	
		TSEQ =TPRG+TPRG	
		TREL =TSEQ+TPRG	
		TUSR =TREL+TPRG	
		;	
896	$0380	MODET *=*+10 	OPEN MODE FOR FILES
906	$038A	COUNTT *=*+10 	TABLE OF BYTE COUNT FOR FILES
916	$0394	STT *=*+10 	STATUS FOR OPENED FILES
926	$039E	RECOTL *=*+10 	TABLE OF RECORD POS. FOR FILES
936	$03A8	RECOTH *=*+10	
		;	
946	$03B2	LIBPT *=*+1 	PTR TO PLACE FOR NEXT LIBRARY DESCRIPTION
		;	
		LIBLEN =10 	NO. OF LIBRARY DESCRIPTIONS
		;	
947	$03B3	LIBLO *=*+LIBLEN	
957	$03BD	LIBHI *=*+LIBLEN	
967	$03C7	LIBPAG *=*+LIBLEN	
		;	
977	$03D1	KEYLEN *=*+16 	LENGTHS OF FUNC.KEY DEF'S
993	$03E1	KLEN *=*+1 	# OF CHARS LEFT OF DEF.
994	$03E2	KPNT *=*+2 	PNT TO KEY DEF
		;	
		; BASIC/KERNAL DMA REQ. RAM CODE	
		;	
		*=$0400 	VIDEO MATRIX #1: VIC 40-COLUMN TEXT
		VICSCN *=*+1024	
		;	
		*=VICSCN	
		SCSIZE =1000 	SCREEN SIZE
1024	$0400	SCREEN *=*+SCSIZE 	SCREEN MEMORY AREA
		*=*+16 	SCREEN MEMORY EXCESS
2040	$07F8	SPRPNT *=*+8 	SPRITE DATA POINTERS
		;	
		;COMAL VAR	
		;	
		;	
		INLEN =162	
2048	$0800	INBUF *=*+INLEN 	INPUT BUFFER
2210	$08A2	CDBUF *=*+CLIMIT 	CODE BUFFER ; 255
2465	$09A1	TXT *=*+TLIMIT 	STRING CONSTANT BUFFER ;80
		TXT1 =TXT-1	
		;	
2545	$09F1	FLEVEL *=*+1 	FOR/TRAP NESTING LEVEL DURING PREPASS
2546	$09F2	Q6 *=*+2 	TEMPORARY
2548	$09F4	Q7 *=*+2 	TEMPORARY
2550	$09F6	Q8 *=*+2 	TEMPORARY
2552	$09F8	Q9 *=*+2 	TEMPORARY
2554	$09FA	INDPTR *=*+1 	POINTER TO INDTBL
2555	$09FB	CURCHK *=*+1 	SAVE FOR FILE# IN CHKIN,CKOUT
2556	$09FC	EXPSTA *=*+1 	EXPECTED DISK STATUS
		;	
2557	$09FD	OPTIO1 *=*+1 	OPTION1: =0: , =1 ; ZONE SEPARATOR
2558	$09FE	DRSCMD *=*+1 	DEFAULT RS232 CMD REG
2559	$09FF	DRSCTR *=*+1 	DEFAULT RS232 CTRL REG
		.END	
			
		;	
		;	
		;	
		; +--------------------------------------------------+	
		; ! !	
		; ! ****** COMMODORE 128 COMAL-80 ****** !	
		; ! !	
		; ! (C) COPYRIGHT UNICOMAL A/S 1984, 1986 !	
		; ! ALL RIGHTS RESERVED. !	
		; ! !	
		; ! !	
		; ! C128SYMB2 FOR COMMODORE 128 COMAL-80 REV. 2.02 !	
		; ! !	
		; +--------------------------------------------------+	
		;	
		;	
		;	
		;ABSOLUT KERNAL VARIABLES	
		;	
		;	
2560	$0A00	SYSVEC *=*+2 	VECTOR TO RESTART SYSTEM
2562	$0A02	DEJAVU *=*+1 	KERNAL WARM/COLD INIT. STATUS BYTE
2563	$0A03	PALNTS *=*+1 	PAL/NTSC SYSTEM FLAG
2564	$0A04	ISTAT *=*+1 	FLAGS RESET VS. NMI STATUS FOR INIT ROUT
2565	$0A05	MEMSTR *=*+2 	START OF MEMORY
2567	$0A07	MEMSIZ *=*+2 	TOP OF MEMORY
		;	
2569	$0A09	IRQTMP *=*+2 	TAPE HANDLER IRQ INDIRECT
2571	$0A0B	CASTON *=*+1 	TAPE SENSE DURING TAPE OP.
2572	$0A0C	KIKA26 *=*+1 	TAPE READ TEMP
2573	$0A0D	STUPID *=*+1 	TAPE READ D1 IRQ IND.
		;	
2574	$0A0E	TIMOUT *=*+1 	FAST SERIAL TIMEOUT FLAG
		;	
		;	
		;RS232 STORAGE	
		;	
2575	$0A0F	ENABL *=*+1 	RS-232 ENABLES
2576	$0A10	M51CTR *=*+1 	6551 CONTROL REGISTER IMAGE
2577	$0A11	M51CDR *=*+1 	6551 COMMAND REGISTER IMAGE
2578	$0A12	M51AJB *=*+2 	NON-STANDARD BPS (TIME/2-100) USA
2580	$0A14	RSSTAT *=*+1 	6551 STATUS REGISTER
2581	$0A15	BITNUM *=*+1 	NUMBER OF BITS LEFT TO SEND
2582	$0A16	BAUDOF *=*+2 	BAUD RATE: FULL BIT TIME (MICROSEC)
2584	$0A18	RIDBE *=*+1 	INDEX TO END OF INPUT BUFFER
2585	$0A19	RIDBS *=*+1 	START OF INPUT BUFFER (PAGE)
2586	$0A1A	RODBS *=*+1 	START OF OUTPUT BUFFER (PAGE)
2587	$0A1B	RODBE *=*+1 	INDEX TO END OF OUTPUT BUFFER
		;	
2588	$0A1C	SERIAL *=*+1 	FAST SERIAL INT/EXT FLAG
		;	
2589	$0A1D	TIMER *=*+3 	DEC. JIFFLE REGISTER
		;	
		;GLOBAL SCREEN EDITOR STORAGE	
		;	
2592	$0A20	KBFLIM *=*+1 	KEYBOARD QUEUE MAX SIZE
2593	$0A21	PAUSE *=*+1 	<CRTL>-S FLAG
2594	$0A22	RPTFLG *=*+1 	ENABLE KEY REPEAT
2595	$0A23	KOUNT *=*+1 	DELAY BETWEEN KEY REPEATS
2596	$0A24	DELAY *=*+1 	DELAY BEFORE KEY REPEAT
2597	$0A25	LSTSHF *=*+1 	DELAY BETWEEN <C=><SHFT> TOGGLES
		;	
2598	$0A26	BLNON *=*+1 	VIC CURSOR MODE
2599	$0A27	BLNSW *=*+1 	VIC CURSOR DISABLE
2600	$0A28	BLNCT *=*+1 	VIC CURSOR BLINK COUNTER
2601	$0A29	GDBLN *=*+1 	VIC CURSOR CHAR BEFORE BLINK
2602	$0A2A	GDCOL *=*+1 	VIC CURSOR COLOR BEF. BLINK
		;	
2603	$0A2B	CURMOD *=*+1 	VDC CURSOR MODE (WHEN ENABLED)
		;	
2604	$0A2C	VM1 *=*+1 	VIC TEXT SCREEN.CHAR BASE POINTER
2605	$0A2D	VM2 *=*+1 	VIC BIT-MAP BASE POINTER
2606	$0A2E	VM3 *=*+1 	VDC TEXT SCREEN BASE
2607	$0A2F	VM4 *=*+1 	VDC ATTRIBUTE BASE
		;	
2608	$0A30	LINTMP *=*+1 	TEMP PTR TO LAST LINE FOR LOOP4
2609	$0A31	SAV80A *=*+1 	TEMP FOR 80-COL ROUTINES
2610	$0A32	SAV80B *=*+1 	
2611	$0A33	CURCOL *=*+1 	VDC CURSOR COLOR BEFORE BLINK
2612	$0A34	SPLITK *=*+1 	VIC SPLIT SCREEN RASTER VALUE
2613	$0A35	FNADRX *=*+1 	SAVE .X DURING BANK OPERATION
2614	$0A36	PALCNT *=*+1 	COUNTER FOR PAL SYSTEMS
2615	$0A37	SPEED *=*+1 	SAVE SYSTEM SPEED DUR. TAPE/SERIAL OP.
2616	$0A38	SPRITE *=*+1 	SAVE SPRITE ENABLES DUR. TAPE OP.
2617	$0A39	BLNING *=*+1 	SAVE BLANKING STATUS DUR. TAPE OP.
2618	$0A3A	HLDOFF *=*+1 	FLAG FOR USER FULL CONTROL OF VIC
2619	$0A3B	LDTBSA *=*+1 	HIGH BYTE OF SA OF VIC SCREEN
		HIBASE =LDTBSA 	64-KERNAL NAME HIBASE
2620	$0A3C	*=*+2 	8563 BLOCK FILL KLUDGE
		;	
		;LOCAL SCREEN EDITOR VAR. SWAP AREA	
		;	
		;	
		*=$0A40 	LOCAL VARIABLES
		;	
		*=$0A60 	LOCAL TAB MAP & WRAP TABLES
		;	
		;MONITOR ABSOLUTE DECLARATIONS	
		;	
		*=$0A80	
		;	
		;FUNCTION KEY ROM CARD TABLES	
		;	
		*=$0AC0	
2752	$0AC0	CURBNK *=*+1 	CURRENT FUNC.KEY ROM BANK
2753	$0AC1	PAT *=*+4 	PHYSICAL ADDRESS TABLE (ID OF LOGGED-IN CARD)
2757	$0AC5	DKFLAG *=*+1 	RESERVED FOR FOREIGN SCREEN EDITORS
		;	
		*=$0B00	
		BUFSZ =192 	TAPE BUFFER SIZE
		TBUFFR *=*+BUFSZ 	CASETTE BUFFER
		;	
		*=$0C00 	RS-232 INPUT BUFFER
		RS232I 	
		;	
		*=$0D00 	RS-232 OUTPUT BUFFER
		RS232O 	
		;	
		*=$0E00 	SPRITE DEF. AREA (MUST BE BELOW $1000 !!!)
		;	
		;*=$1000 ;PROGRAMMABLE FUNCTION KEY DEF.	
		;PKYNUM =10 ;NUM.OF DEFINABLE KEYS (F1-F8,<SHIFT>RUN,HELP)	
4096	$1000	;PKYBUF *=*+PKYNUM ;PROG. FUNC. KEY LENGTHS TABLE	
4106	$100A	;PKYDEF *=*+256-PKYNUM ;PROG. FUNC. KEY STRING	
		;	
		*=$1100 	CP/M RESET CODE,BASIC DOS & VSP VAR.
		;	
		;COMAL RAM CODE	
		;	
		KJMPTB =*	
		;	
		;KERNAL JUMPTABLE	
		;	
4352	$1100	CINT *=*+9 	KERNAL: CINT
4361	$1109	RESTOR *=*+9 	KERNAL: RESTOR
4370	$1112	RAMTAS *=*+9 	KERNAL: RAMTAS
4379	$111B	IOINIT *=*+9 	KERNAL: IOINIT
4388	$1124	CHKIN *=*+9 	KERNAL: CHKIN
4397	$112D	CKOUT *=*+22 	KERNAL: CKOUT
4419	$1143	CLRCH *=*+23 	KERNAL: CLRCH
4442	$115A	OPEN *=*+9 	KERNAL: OPEN
4451	$1163	CLOSE *=*+9 	KERNAL: CLOSE
4460	$116C	RDT *=*+9 	KERNAL: RDT
4469	$1175	WRT *=*+9 	KERNAL: WRT
4478	$117E	GET *=*+9 	KERNAL: GET
4487	$1187	SETNAM *=*+9 	KERNAL: SETNAM
4496	$1190	PLOT *=*+9 	KERNAL: PLOT
4505	$1199	DISPLY *=*+9 	EDITOR: DISPLY
4514	$11A2	CURSOR *=*+9 	EDITOR: CURSOR
4523	$11AB	ESCFNC *=*+9 	EDITOR: ESCFNC
4532	$11B4	SPIOUT *=*+9 	KERNAL: SPIOUT
4541	$11BD	SWAP *=*+9 	EDITOR: SWAPPER
4550	$11C6	WINDOW *=*+9 	EDITOR: WINDOW
4559	$11CF	PRINT *=*+9 	EDITOR: PRINT
		;	
		*=$1200 	UNUSED
		;	
		*=$1300 	UNALLOCATED RAM
		;	
4864	$1300	STDPK1 *=*+150 	GRAPHIC IRQ RAM CODE
		;	
5014	$1396	STDPK2 *=*+900	
		;	
5914	$171A	SPSAV *=*+1 	SAVE OF .S DURING EXECUTION
5915	$171B	SCINF *=*+2 	NAME POINTER
		;	
		PSTART =*	
		;	
5917	$171D	AUTO1 *=*+2 	CURRENT LINE NUMBER FOR AUTO
5919	$171F	AUTOST *=*+2 	STEP FOR AUTO
		;	
5921	$1721	DSTART *=*+2 	START OF DATA QUEUE
		;	
5923	$1723	TABSET *=*+1 	VALUE OF LAST ZONE STATEMENT
5924	$1724	ALTPOS *=*+1 	POSITION IN SELECT OUTPUT FILE
5925	$1725	INTRNO *=*+2 	PROCEDURE GIVEN BY INTERRUPT STMT.
		;	
		PEND =*	
		;	
5927	$1727	ERRPNT *=*+1 	CHAR POS OF ERROR
5928	$1728	NORINT *=*+2 	NORMAL INTERRUPT VECTOR
5930	$172A	SAFE *=*+1 	SAFE STATUS
5931	$172B	MAINRV *=*+1 	MAIN REVISION
5932	$172C	SUBRV *=*+1 	SUB REVISION
5933	$172D	TESTRV *=*+1 	TEST VERSION
5934	$172E	MSGLIN *=*+2 	ADDRESS OF MESSAGE LINE
5936	$1730	MSGPRE *=*+1 	MESSAGE PRESENT FLAG
5937	$1731	OLDPNT *=*+2 	SAVE PNT
5939	$1733	UPPER2 *=*+1 	COPY OF BORGE
5940	$1734	EXTPRC *=*+1 	FLAG FOR LOADING OF EXTERNAL PROC/FUNC
5941	$1735	EOFBLK *=*+1 	BURST READ LAST BLOK
5942	$1736	LOADMD *=*+1 	LOAD MODE: =0 BURST =1 NORMAL LOAD
5943	$1737	EXTCNT *=*+2 	NESTING LEVEL OF EXTERNAL PROC/FUNC
5945	$1739	INSMOD *=*+1 	SAVE LOC FOR INSFLG
5946	$173A	LUNIT *=*+1 	LAST DISC (STATUS)
5947	$173B	BORGE *=*+1 	SPECIAL FLAGS FOR LISTING
5948	$173C	OPENFL *=*+1 	FLAG USED BY COPEN
5949	$173D	DFUNLN *=*+1 	LENGTH OF DEFAULT UNIT TEXT
5950	$173E	DFUNIT *=*+2 	DEFAULT UNIT (POWER UP VALUE: .BYTE '0')
5952	$1740	DEFOUT *=*+1 	SELECT OUTPUT FLAG
		;	
		;	
5953	$1741	PPAGE *=*+1 	OVERLAY TO PEEK/POKE/SYS
5954	$1742	LOADIN *=*+1 	<>0: LOADING COMAL PROGRAM
5955	$1743	UNITFL *=*+1 	0: SIMP.DEV; 1: DRIVE; 2: CASSETTE
5956	$1744	MODE *=*+1 	FILE MODE
5957	$1745	CSTAT *=*+1 	STATUS OF COMAL PROGRAM
		;	
		;1: INPUT ANALYSIS FROM SCREEN	
		;2: - - - FILE	
		;3: PREPASSING	
		;4: EXECUTING A COMMAND	
		;5: EXECUTING PROGRAM	
		;	
5958	$1746	LSTFLG *=*+1 	BIT VECTOR FOR RCREAT:
		;	
		ININD =$01	
		OUTIND =$02	
		LSTCON =$04	
		NOIND =$08	
		LSTEXT =$10	
		;	
5959	$1747	LPMODE *=*+1 	DEFAULT PRINTER OPEN MODE
5960	$1748	LPSA *=*+1 	DEFAULT PRINTER SECONDARY ADDRESS
5961	$1749	LPFA *=*+1 	DEFAULT PRINTER UNIT
5962	$174A	SPMODE *=*+1 	DEFAULT RS232 OPEN MODE
5963	$174B	SPSA *=*+1 	DEFAULT RS232 SECONDARY ADDRESS
5964	$174C	SPFA *=*+1 	DEFAULT RS232 UNIT
		;	
5965	$174D	RECDEL *=*+1 	RECORD POSITIONING DELAY
5966	$174E	ENDADR *=*+2 	TOP OF RAM
5968	$1750	HEADLN *=*+1 	POWER ON MESSAGE FLAG
		;	
5969	$1751	KWTAB *=*+2 	KEYWORD TABLE (PAGEA)
		;	
5971	$1753	DFBORD *=*+1 	DEFAULT BORDER COLOR
5972	$1754	DFBACK *=*+1 	DEFAULT BACKGROUND COLOR
5973	$1755	DFFORG *=*+1 	DEFAULT FOREGROUND COLOR
5974	$1756	ACBORD *=*+1 	ACTUAL TEXT BORDER
5975	$1757	ACBACK *=*+1 	ACTUAL TEXT BACKGROUND
5976	$1758	DF8FOR *=*+1 	DEFAULT 80 CHAR FOREGROUND COLOR
5977	$1759	DF8BCK *=*+1 	DEFAULT 80 CHAR BACKGROUND COLOR
		;	
5978	$175A	DEFINP *=*+1 	SELECT INPUT FLAG
5979	$175B	HZ50 *=*+1 	0=60 HZ, 1=50 HZ TOD
5980	$175C	MSKPAG *=*+1 	MASKED PAGE INFO
5981	$175D	INPOFS *=*+1 	INPUT OFFSET
5982	$175E	TRCHAR *=*+1 	TERMINATOR CHAR
5983	$175F	TEROFS *=*+1 	TERMINATOR OFFSET
5984	$1760	CURMOF *=*+1 	VDC CURSOR MODE WHEN DISABLET
5985	$1761	CPUSPD *=*+1 	CPU SPEED (0=AUTO,$80=1MHZ,$C0=2MHZ)
5986	$1762	CN2MHZ *=*+1	
5987	$1763	COLDVC *=*+1 	COLD START IRQ VECTOR
5988	$1764	CPCASE *=*+1 	CURRENT PRINTER CASE (HARDCOPY)
5989	$1765	QMODE *=*+1 	HARDCOPY QUOTE MODE
		;	
5990	$1766	RANGNO *=*+1 	LINE # RANGE POINTER
5991	$1767	RANGPT *=*+1 	LINE # RANGE POINTER
5992	$1768	RANGMX =32	
5992	$1768	RANGES *=*+RANGMX 	LINE # RANGES
6024	$1788	IERROR *=*+2 	VECTOR: PRINT BASIC ERROR MESSAGE
6026	$178A	NUM2 *=*+5	
		;	
6031	$178F	ACTLEN *=*+1 	VAR FOR GETLIN
6032	$1790	SPELEN *=*+1	
6033	$1791	CURPOS *=*+1	
		;	
6034	$1792	FSELEN *=*+1 	LENGTH OF SEARCH STRING
6035	$1793	FRELEN *=*+1 	LENGTH OF REPLACE STRING
6036	$1794	FSKIP *=*+1 	
6037	$1795	FMODE *=*+1 	BIT7: 1=CHANGE 0=EDIT OR FIND
6038	$1796	RAMFRE *=*+2 	POINTER TO FREE IN EXTRA RAM
6040	$1798	RAMTOP *=*+2 	TOP OF EXTRA RAM ($C000)
6042	$179A	*=*+10 	UNUSED
		;	
		;	
		MTO =*	
		;	
		;SUBROUTINES TO USE IN ASSEMBLER	
		;CODED SUBROUTINES IN COMAL:	
		;	
6052	$17A4	COLD *=*+3 	COLD START OF COMAL
6055	$17A7	WARM *=*+3 	WARM START OF COMAL
6058	$17AA	CALL *=*+3 	JSR TO ANOTHER PAGE.
6061	$17AD	GOTO *=*+3 	JMP TO ANOTHER PAGE.
6064	$17B0	LOAD *=*+3 	LOAD FROM PAGEX
6067	$17B3	STORE *=*+3 	STORE TO PAGEX
6070	$17B6	EXEC *=*+3 	JSR TO PAGEX
6073	$17B9	SPAGEX *=*+3 	SET PAGEX
		;	
6076	$17BC	LDAC1 *=*+3 	LOAD AC1
6079	$17BF	LDAC2 *=*+3 	LOAD AC2
6082	$17C2	FNDPAR *=*+3 	FIND PARAMETER (ASM.CALLS)
6085	$17C5	COPY *=*+9 	COPY AREA TOWARDS LOWER ADDRESSES
6094	$17CE	COPYDN *=*+9 	COPY AREA TOWARDS HIGHER ADDRESSES
6103	$17D7	FPADD *=*+3 	LOAD AC2 AND ADD AC2 TO AC1
6106	$17DA	FPADD2 *=*+9 	ADD AC2 TO AC1
6115	$17E3	FPAHF *=*+9 	ADD 0.5 TO AC1
6124	$17EC	FPSUB *=*+3 	LOAD AC2 AND SUB AC2 FROM AC1
6127	$17EF	FPSUB2 *=*+9 	SUB AC2 FROM AC1
6136	$17F8	FPMUL *=*+3 	LOAD AC2 AND MUL AC2 BY AC1
6139	$17FB	FPMUL2 *=*+9 	MUL AC2 BY AC1
6148	$1804	FPDIV *=*+3 	LOAD AC2 AND DIV AC2 BY AC1
6151	$1807	FPDIV2 *=*+9 	DIV AC2 BY AC1
6160	$1810	MUL10 *=*+9 	MULTIPLY AC1 BY 10.0
6169	$1819	DIV10 *=*+9 	DIVIDE AC1 BY 10.0
6178	$1822	STAC1 *=*+3 	STORE AC1
6181	$1825	C1T2 *=*+9 	COPY AC1 TO AC2
6190	$182E	C2T1 *=*+9 	COPY AC2 TO AC1
6199	$1837	FPNEG *=*+9 	NEGATE AC1
6208	$1840	FPSGN *=*+9 	SIGN OF AC1
6217	$1849	FPSIN *=*+9 	SINE OF AC1
6226	$1852	FPCOS *=*+9 	COSINE OF AC1
6235	$185B	FPSQR *=*+9 	SQUARE ROOT OF AC1
6244	$1864	FPTAN *=*+9 	TANGENT OF AC1
6253	$186D	FPPOW *=*+9 	RAISE AC2 TO THE POWER OF AC1
6262	$1876	FPATN *=*+9 	ARCTANGENT OF AC1
6271	$187F	FPEXP *=*+9 	RAISE AC1 TO THE POWER OF E
6280	$1888	FPLOG *=*+9 	LOGARITHM BASE E OF AC1
6289	$1891	FPRND *=*+9 	COMPUTE PSEUDO-RANDOM NUMBER (RANGE 0 TO 1)
6298	$189A	FPCOM *=*+9 	COMPARE NUMBER TO AC1
6307	$18A3	TRUNC *=*+9 	CONVERT AC1 INTO INTEGER (-32768 .. 32767)
		FPINT =TRUNC	
6316	$18AC	FPINTG *=*+9 	CONVERT AC1 INTO INTEGER (-2^24 .. 2^24-1)
6325	$18B5	FPINTA *=*+9 	CONVERT AC1 INTO INTEGER (0 .. 65535)
6334	$18BE	INTFP *=*+9 	CONVERT INTEGER INTO FP IN AC1
6343	$18C7	FPASC *=*+9 	CONVERT AC1 INTO ASCII EQUIVALENT (STR$)
		;	
6352	$18D0	VAL *=*+6 	CONVERT DECIMAL STRING INTO BINARY IN AC1
6358	$18D6	POPA1 *=*+9 	POP AC1
6367	$18DF	POPA2 *=*+9 	POP AC2
6376	$18E8	PUSHA1 *=*+9 	PUSH AC1
6385	$18F1	PUSHRL *=*+9 	PUSH REAL NUMBER
6394	$18FA	PSHINT *=*+9 	FLOAT & PUSH INTEGER (-32768 .. 32767)
6403	$1903	INTFPA *=*+9 	FLOAT & PUSH INTEGER (0 .. 65535)
		;	
6412	$190C	EXCGST *=*+9 	ALLOCATE LOCAL STORAGE
6421	$1915	EXCREM *=*+9 	RECLAIM LOCAL STORAGE
6430	$191E	RESTOP *=*+9 	ALLOCATE GLOBAL STORAGE
6439	$1927	RUNERR *=*+6 	GO TO COMAL ERROR HANDLER
		;	
6445	$192D	CRDT *=*+3 	READ CHARACTER
6448	$1930	SPACE *=*+2 	WRITE SPACE
6450	$1932	CWRT *=*+3 	WRITE CHARACTER
6453	$1935	CCHKIN *=*+3 	SELECT INPUT FILE
6456	$1938	CCKOUT *=*+3 	SELECT OUTPUT FILE
6459	$193B	CCLRCH *=*+3 	CLEAR CHANNEL
6462	$193E	CFNAME *=*+7 	PARSE & COPY FILE NAME
6469	$1945	COPEN *=*+3 	OPEN FILE
6472	$1948	CCLOSE *=*+3 	CLOSE FILE
6475	$194B	CRLF *=*+3 	OUTPUT CR AND LF
6478	$194E	GETLIN *=*+7 	INPUT KEYBOARD LINE
		;	
6485	$1955	RESET *=*+6 	RESET PROGRAM POINTERS
6491	$195B	DUMMY *=*+1 	EMPTY SUBROUTINE (RTS)
6492	$195C	COMAL *=*+6 	GO TO COMAL EDITOR
6498	$1962	EXCUTE *=*+7 	EXECUTE CODE IN CDBUF
6505	$1969	JLOAD *=*+7 	LOAD COMAL PROGRAM
6512	$1970	ARRLEN *=*+7 	COMPUTE NO. OF ELEMENTS IN ARRAY
6519	$1977	FOPEN *=*+7 	FAST DISK OPEN
6526	$197E	FCLOSE *=*+7 	FAST DISK CLOSE
6533	$1985	CGET *=*+3 	GET CHARACTER
6536	$1988	HARDCO *=*+7 	PRINT HARDCOPY
		;	
		;-----------------------------------------------	
		;	
		;COMAL PROGRAM FOLLOWS HERE:	
		;	
		*=$2000	
8192	$2000	MBEGIN *=*+4 	START OF MEMORY
8196	$2004	MBEGN1 *=*+1 	START OF NAME TABLE
8197	$2005	MBEGN2 *=*+1 	START OF STACKS
		;	
		;/////// I/O DEVICE MAP /////////	
		;	
		VICCHR =$D000 	VIC CHARACTER ROM
		;	
		VICREG =$D000 	VIC REGISTERS
		;	
		SIDREG =$D400 	SID REGISTERS
		;	
		MMULO =$D500 	MMU PRIMORY REGISTERS
		;	
		VDC =$D600 	8563 REGISTERS
		;	
		VICCOL =$D800 	VIC COLOR NYBBLES
		;	
		CIA1 =$DC00 	6526 #1
		;	
		CIA2 =$DD00 	6526 #2
		;	
		IO1 =$DE00 	EXP. I/O SLOT
		;	
		IO2 =$DF00 	EPX. I/O SLOT RESERVED FOR DMA CTLR
		;	
		MMUHI =$FF00 	MMU SECONDARY REGISTERS
		;	
		;	
		*=VICREG	
		;	
53248	$D000	; 6566 VIDEO INTERFACE CONTROLLER	
		;	
		VIC =*	
53248	$D000	SPRPOS *=*+16 	SPRITES 0-7 X & Y POS
53264	$D010	SPRXPS *=*+1 	SPRITES 0-7 X-POS (MSB OF X-COORD.)
53265	$D011	VCTRL1 *=*+1 	VIC CONTROL REGISTER
53266	$D012	RWRAST *=*+1 	READ/WRITE RASTER VALUE FOR COMPARE IRQ
53267	$D013	PENX *=*+1 	LIGHT-PEN LATCH X-POS
53268	$D014	PENY *=*+1 	LIGHT-PEN LATCH Y-POS
53269	$D015	SPRDSP *=*+1 	SPRITE DISPLAY ENABLE
53270	$D016	VCTRL2 *=*+1 	VIC CONTROL REGISTER
53271	$D017	SPRYEX *=*+1 	SPRITES 0-7 EXPAND 2*VERTICAL (Y)
53272	$D018	VCTRL3 *=*+1 	VIC MEMORY CONTROL REGISTER
53273	$D019	IRQOCC *=*+1 	VIC INTERRUPT FLAG REGISTER
53274	$D01A	IRQMSK *=*+1 	IRQ MASK REGISTER
53275	$D01B	SPRBDP *=*+1 	SPRITE TO BACKGROUND DISPLAY PRIORITY
53276	$D01C	SPRMCM *=*+1 	SPRITES 0-7 MULTI-COLOR MODE SELECT
53277	$D01D	SPRXEX *=*+1 	SPRITES 0-7 EXPAND 2*HORIZONTAL (X)
53278	$D01E	SPRSPR *=*+1 	SPRITE TO SPRITE COLLISION DETECT
53279	$D01F	SPRBCK *=*+1 	SPRITE TO BACKGROUND COLLISION DETECT
53280	$D020	BORCOL *=*+1 	BORDER COLOR
53281	$D021	BCKCOL *=*+4 	BACKGROUND COLOR 0-3
53285	$D025	SPRMCL *=*+2 	SPRITE MULTI-COLOR REGISTER 0-1
53287	$D027	SPRCOL *=*+8 	SPRITE 0-7 COLOR
		;	
		*=SIDREG	
		;	
54272	$D400	; 6581 SOUND INTERFACE DEVICE	
		;	
		SID =* 	VOICE 1:
54272	$D400	V1FREQ *=*+2 	FREQUENCY CONTROL
54274	$D402	V1PWW *=*+2 	PULSE WAVEFORM WIDTH
54276	$D404	V1CTRL *=*+1 	CONTROL REGISTER
54277	$D405	V1ENVL *=*+2 	ENVELOPE GENERATOR (ADSR)
		;VOICE 2:	
54279	$D407	V2FREQ *=*+2 	FREQUENCY CONTROL
54281	$D409	V2PWW *=*+2 	PULSE WAVEFORM WIDTH
54283	$D40B	V2CTRL *=*+1 	CONTROL REGISTER
54284	$D40C	V2ENVL *=*+2 	ENVELOPE GENERATOR (ADSR)
		;VOICE 3:	
54286	$D40E	V3FREQ *=*+2 	FREQUENCY CONTROL
54288	$D410	V3PWW *=*+2 	PULSE WAVEFORM WIDTH
54290	$D412	V3CTRL *=*+1 	CONTROL REGISTER
54291	$D413	V3ENVL *=*+2 	ENVELOPE GENERATOR (ADSR)
		;FILTERS:	
54293	$D415	FCUTOF *=*+2 	FILTER CUTOFF FREQUENCY
54295	$D417	FRESON *=*+1 	FILTER RESONANCE/VOICE INPUT CONTROL
54296	$D418	FMOVOL *=*+1 	SELECT FILTER MODE AND VOLUME
54297	$D419	PADDL1 *=*+1 	A/D-CONVERTER: GAME PADDLE 1
54298	$D41A	PADDL2 *=*+1 	A/D-CONVERTER: GAME PADDLE 2
54299	$D41B	OSC *=*+1 	OSCILLATOR 3 RANDOM NUMBER GENERATOR
54300	$D41C	ENV *=*+1 	ENVELOPE GENERATOR 3 OUTPUT
		;	
		;VIC COLOR RAM	
		;	
		*=VICCOL	
55296	$D800	COLRAM *=*+SCSIZE+24 	COLOR RAM (NYBBLES)
		;	
		*=CIA1	
		;	
56320	$DC00	;6526 COMPLEX INTERFACE ADAPTER #1	
		;	
		CHTIM =*	
		COLM =* 	KEYBOARD MATRIX
56320	$DC00	D1PRA *=*+1	
		ROWS =* 	KEYBOARD MATRIX
56321	$DC01	D1PRB *=*+1	
56322	$DC02	D1DDRA *=*+1	
56323	$DC03	D1DDRB *=*+1	
56324	$DC04	D1T1L *=*+1	
56325	$DC05	D1T1H *=*+1	
56326	$DC06	D1T2L *=*+1	
56327	$DC07	D1T2H *=*+1	
56328	$DC08	D1TOD1 *=*+1	
56329	$DC09	D1TODS *=*+1	
56330	$DC0A	D1TODM *=*+1	
56331	$DC0B	D1TODH *=*+1	
56332	$DC0C	D1SDR *=*+1	
56333	$DC0D	D1ICR *=*+1	
56334	$DC0E	D1CRA *=*+1	
56335	$DC0F	D1CRB *=*+1	
		;	
		*=CIA2	
		;	
56576	$DD00	;6526 COMPLEX INTERFACE ADAPTER #2	
		;	
56576	$DD00	D2PRA *=*+1	
56577	$DD01	D2PRB *=*+1	
56578	$DD02	D2DDRA *=*+1	
56579	$DD03	D2DDRB *=*+1	
56580	$DD04	D2T1L *=*+1	
56581	$DD05	D2T1H *=*+1	
56582	$DD06	D2T2L *=*+1	
56583	$DD07	D2T2H *=*+1	
56584	$DD08	D2TOD1 *=*+1	
56585	$DD09	D2TODS *=*+1	
56586	$DD0A	D2TODM *=*+1	
56587	$DD0B	D2TODH *=*+1	
56588	$DD0C	D2SDR *=*+1	
56589	$DD0D	S2ICR *=*+1	
56590	$DD0E	D2CRA *=*+1	
56591	$DD0F	D2CRB *=*+1	
		;	
		*=IO1	
		;	
56832	$DE00	OVRLAY *=*+256 	OVERLAY CONTROL PORT
		;	
54528	$D500	;C/128 MEMORY MANAGEMENT UNIT	
		;	
		*=MMULO	
54528	$D500	MMUCRL *=*+1 	CONFIGURATION REGISTER (PRIM)
54529	$D501	PCRA *=*+1 	PRE. CONFIG. REG. A
54530	$D502	PCRB *=*+1 	PRE. CONFIG. REG. B
54531	$D503	PCRC *=*+1 	PRE. CONFIG. REG. C
54532	$D504	PCRD *=*+1 	PRE. CONFIG. REG. D
54533	$D505	MMUMCR *=*+1 	MODE CONFIG. REG.
54534	$D506	MMURCR *=*+1 	RAM CONFIG. REG.
54535	$D507	MMUP0L *=*+1 	PAGE 0 PTR LOW
54536	$D508	MMUP0H *=*+1 	PAGE 0 PTR HIGH
54537	$D509	MMUP1L *=*+1 	PAGE 1 PTR LOW
54538	$D50A	MMUP1H *=*+1 	PAGE 1 PTR HIGH
54539	$D50B	MMUVER *=*+1 	MMU VERSION NUMBER
		;	
		*=MMUHI	
65280	$FF00	MMUCR *=*+1 	CONFIG. REG. SECONDARY
65281	$FF01	LCRA *=*+1 	LOAD CONFIG. REG. A
65282	$FF02	LCRB *=*+1 	LOAD CONFIG. REG. B
65283	$FF03	LCRC *=*+1 	LOAD CONFIG. REG. C
65284	$FF04	LCRD *=*+1 	LOAD CONFIG. REG. D
		;	
		;	
54784	$D600	; C/128 80-COLUMN VIDEO CONTROLER	
		;	
		*=VDC	
54784	$D600	VDCADR *=*+1 	8563 ADDR. REG
54785	$D601	VDCDAT *=*+1 	8563 DATA REG.
		;	
		VDCSCN =$0000 	8563 80-COLUMN SCREEN (2KB)
		VDCCOL =$0800 	8563 ATTRIBUTE AREA (2KB)
		VDCCHR =$2000 	8563 CHARACTER RAM (4KB)
		;	
		SKIP =$2C 	OPCODE FOR 'BIT <ABS>' (SKIP 2 BYTES)
		;	
		;	
		;********************************************************	
		;	
		;	
		;FOR USE IN ASSEMBLER CODED SUBROUTINES IN COMAL:	
		;	
		;LABELS FOR PROC/FUNC DEFINITIONS	
		;	
		ROMMED =%10000000	
		;	
		DEFPAG =2 	RAM0+I/O
		;	
		PROC =112	
		ENDPRC =126	
		;	
		FUNC =227	
		ENDFNC =126	
		;	
		PARAM =114	
		VALUE =PARAM+0	
		REF =PARAM+3	
		ARRAY =6	
		;	
		REAL =0	
		INT =1	
		STR =2	
		;	
		;	
		;SIGNAL TYPES:	
		;	
		POWER1 =0 	POWER UP SEI (ONLY FOR ROMMED LIBRARIES)
		POWER2 =1 	POWER UP CLI (ONLY FOR ROMMED LIBRARIES)
		LINK =2 	AFTER LINK/LOAD-COMMAND (ONLY LIBRARY JUST LINKED)
		DSCRD =3 	BEFORE DISCARD-COMMAND
		NEW =4 	AFTER NEW-COMMAND OR BAD LOAD/RUN/CHAIN
		CLRTAB =5 	AFTER NAME TABLE IS CLEARED
		RUN =6 	BEFORE RUN/CHAIN
		WARM1 =7 	WARM START SEI
		CON =8 	BEFORE CONTINUATION (CON COMMAND)
		ERROR =9 	AFTER ERROR MESSAGE PRINTED
		STOP1 =10 	AFTER STOP/END
		BASIC =11 	BEFORE LEAVING COMAL
		;	
		;	
		.END	
		=	